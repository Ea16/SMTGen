(set-logic QF_BV)
(set-option :produce-models true)
(declare-const bv_0 (_ BitVec 256))
(declare-const bv_1 (_ BitVec 256))
(declare-const bv_2 (_ BitVec 256))
(declare-const bv_3 (_ BitVec 256))
(declare-const bv_4 (_ BitVec 256))
(declare-const bv_5 (_ BitVec 256))
(declare-const bv_6 (_ BitVec 256))
(declare-const bv_7 Bool)
(declare-const bv_8 (_ BitVec 256))
(declare-const bv_9 (_ BitVec 256))
(declare-const bv_10 (_ BitVec 256))
(declare-const bv_11 Bool)
(declare-const bv_12 (_ BitVec 256))
(declare-const bv_13 (_ BitVec 256))
(assert (= bv_2 (bvlshr bv_1 bv_0)))
(assert (= bv_3 (bvlshr bv_2 bv_1)))
(assert (= bv_4 (bvlshr bv_2 bv_3)))
(assert (= bv_5 (bvurem bv_2 bv_1)))
(assert (= bv_6 (bvor bv_5 bv_0)))
(assert (= bv_7 (bvugt bv_6 bv_0)))
(assert (= bv_8 (bvadd bv_6 bv_1)))
(assert (= bv_9 (bvor bv_6 bv_1)))
(assert (= bv_10 (bvsub bv_2 bv_4)))
(assert (= bv_11 (bvsle bv_6 bv_8)))
(assert (= bv_12 (bvshl bv_9 bv_1)))
(assert (= bv_13 (bvadd bv_0 bv_12)))
(declare-const z_0 Bool)
(declare-const z_1 Bool)
(declare-const z_2 Bool)
(declare-const z_3 Bool)
(declare-const z_4 Bool)
(declare-const z_5 Bool)
(assert (= z_0 (= bv_2 bv_13)))
(assert (= z_1 (= bv_12 bv_5)))
(assert (= z_2 (= bv_8 bv_4)))
(assert (= z_3 (= bv_9 bv_6)))
(assert (= z_4 (= bv_7 bv_11)))
(assert (= z_5 (= bv_10 bv_3)))
(assert ( or ( or z_0 ( not ( or ( or z_4 z_5 ) z_1 ) ) ) ( and z_3 z_2 ) ) )
(check-sat)
(get-model)
(exit)
